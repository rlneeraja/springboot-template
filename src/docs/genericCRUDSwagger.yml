
swagger: "2.0"
info:
  title: "CRUD Generic services"
  description: "This document describes the pattern to be followed for CRUD based APIs."
  version: "1.0.0"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "mscaldas@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: /v1
tags:
  - name: ResourceA CRUD
    description: CRUD methods for a given ResourceA
  - name: Resource A/B Association CRUD
    description: |
      CRUD methods for associating dependant ResourceB to ResourceA

schemes:
- "http"
paths:
  /resources:
    get:
      tags:
        - ResourceA CRUD
      summary: "Retrieves a list of resources"
      description: |
        Plural - 'resources' - endpoint to identify that we are retrieving a list of
        the resources.
        This method can use optional query parameters as filterning and paging mechanism.
        Paging defined below...
      parameters:
        - in: query
          name: page_size
          description: Number of records to be retrieved.
          type: integer
        - in: query
          name: page_number
          description: The Page number to be retrieved. Fist page should be 1.
          type: integer
      responses:
        200:
          description: "Returns a List of resourceA. To be Defined if no hits should return an empty list or a 404"
          schema:
            $ref: "#/definitions/CollectionResults"
        400:
          description: "Any error that is caused by the user - bad data sent, bad parameters, business rules violated, etc."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Caller is not authorized to execute this method."
        500:
          description: "Any server side error that can occur."
          schema:
            $ref: "#/definitions/Error"
  /resource:
    post:
      tags:
        - ResourceA CRUD
      summary: "Singular - 'resource' - Creates a new resource"
      parameters:
        - in: body
          name: body
          description: "JSON representation of ResourceA"
          schema:
            $ref: "#/definitions/resourceA"

      description: |
        Creates a new instance of the resource. Needs to indicate whether subResoruces
        are creted along with the Parent resource.
      responses:
        200:
          description: "JSON representation of the resource after being created."
          schema:
            $ref: "#/definitions/resourceA"
        400:
          description: "Any error that is caused by the user - bad data sent, business rules violated, etc."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Caller is not authorized to execute this method."
        500:
          description: "Any Server side error can be reported via a 500. those errors are not recoverable by they user - something is wrong with the system"
          schema:
            $ref: "#/definitions/Error"

  /resource/{resource_id}:
    parameters:
      - in: path
        name: resource_id
        description: |
          A unique identifier of this resource - usually the internal persistence primary key or a unique key that is compatible with URL formatting.
        type: string
        required: true
    get:
      tags:
        - ResourceA CRUD
      summary: "Retrieves a single resource based on resource {resource_id}"
      description: |
        Retrieves a single Resource identified by {resource_id}.
        Should specify which sub resources will be retrieved along with the Parent resource.
      responses:
        200:
          description: "JSON representation of the resource mapped to {resource_id}. "
          schema:
            $ref: "#/definitions/resourceA"
        400:
          description: "Any error that is caused by the user - bad data sent, business rules violated, etc."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Caller is not authorized to execute this method."
        404:
          description: "If no resource exists for {resource_id}"
        500:
          description: "Any server side error can be reported via a 500"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - ResourceA CRUD
      summary: "Updates resource"
      parameters:
        - in: body
          name: body
          description: "JSON representation of ResourceA"
          schema:
            $ref: "#/definitions/resourceA"
      description: |
        Updates the given resource. It needs to define how the update handles sub resources.
        It can get tricky doing full CRUD on sub resources, so it's easier, if possible,
        to handle updates only on the Parent resource and create specific endpoints for
        CRUD operations on sub resources.
      responses:
        200:
          description: "JSON representation of the resource mapped to {resource_id}"
          schema:
            $ref: "#/definitions/resourceA"
        400:
          description: "Any error that is caused by the user - bad data sent, business rules violated, etc."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Caller is not authorized to execute this method."
        404:
          description: "If no resource exists for {resource_id}"
        409:
          description: |
            Conflict. The resource_id in the parameter has to match the ID on the object representation. Otherwise a 409 will be sent. If using some kind of versioning to avoid overwriting changes, and there's a version mismatch, a 409 can also be used.
        500:
          description: "Any server side error can be reported via a 500"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - ResourceA CRUD
      summary: "Removes resource. (Most likely will disable it)"
      parameters:
        - in: query
          name: version
          type: string
          required: true
          description: If using versioning for concurrency, send the current version the user loaded as a query parameters.
      responses:
        200:
          description: "Removes (or disables/hides) the given resource. "
        400:
          description: "Any error that is caused by the user - bad data sent, business rules violated, etc."
          schema:
            $ref: "#/definitions/Error"
        403:
          description: "Caller is not authorized to execute this method."
        404:
          description: "If no resource exists for {resource_id}"
        409:
          description: |
            Conflict. If using some kind of versioning to avoid overwriting changes, and there's a version mismatch, a 409 can be used.
        500:
          description: "Any server side error can be reported via a 500"
          schema:
            $ref: "#/definitions/Error"

  /resource/{resource_id}/resourceBs:
    parameters:
      - in: path
        name: resource_id
        description: |
          A unique identifier of this resource - usually the internal persistence primary key or a unique key that is compatible with URL formatting.
        type: string
        required: true
    get:
      tags:
        - Resource A/B Association CRUD
      summary: "Plural resourceBs - Retrieves a list of resourceBs associated with parent resource {resource_id}."
      description: |
        Retrieves a list of resource Bs associated with resource A. If the list is expected
        to be somewhat small (say, always less than 50 elements), pagination might not be necessary and you can return simply the array of all elements. But if the list has
        the potential of being too big, pagination might be required and you should return a
        CollectionsResults.
      responses:
        200:
          description: "List of Resource B (sub resources) associated with ResourceA. If pagination is required, use CollectionResults to include paging metadata"
        403:
          description: "Caller is not authorized to execute this method."
        404:
          description: "Parent resource {resource_id} does not exists"
        500:
          description: "Any server side error can be reported via a 500"
          schema:
            $ref: "#/definitions/Error"

  /resource/{resource_id}/resourceB:
    parameters:
      - in: path
        name: resource_id
        description: |
          A unique identifier of this resource - usually the internal persistence primary key or a unique key that is compatible with URL formatting.
        type: string
        required: true
    post:
      tags:
        - Resource A/B Association CRUD
      summary: "Associate a new resourceB to the resource {resource_id}"
      description: |
        If Resource B life cycle is tied to parent Resource A (say an address for a person),
        this method controls the full life cycle of Resource B, i.e., it should create the resource and associated with Resource A.
        If Resource B life cycle is independent of Resource A (say, people on a project ),
        this method should control only the association. And ResourceB should have
        it's own CRUD endpoints to maintain it.
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/resourceB"
      responses:
        200:
          description: "Json representation of resource B after being persisted."
        403:
          description: "Caller is not authorized to execute this method."
        404:
          description: "Parent resource {resource_id} does not exists"
        500:
          description: "Any server side error can be reported via a 500"
          schema:
            $ref: "#/definitions/Error"
  /resource/{resource_id}/resourceB/{resourceB_id}:
    parameters:
      - in: path
        name: resource_id
        type: string
        required: true
      - in: path
        name: resourceB_id
        type: string
        required: true
    get:
      tags:
        - Resource A/B Association CRUD
      summary: "Retrieves the specific resource B associated with the given resource A."

      responses:
        200:
          description: "JSON representation of Resource B"
          schema:
            $ref: "#/definitions/resourceB"
        403:
          description: "Caller is not authorized to execute this method."
        404:
          description: "Parent resource {resource_id} or child resource (resourceB_id} does not exist"
        500:
          description: "Any server side error can be reported via a 500"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - Resource A/B Association CRUD
      summary: "Updates the association of resource and resourceB"
      description: |
        If Resource B life cycle is tied to parent Resource A (say an address for a person),
        this method controls the full life cycle of Resource B, i.e., it should update the resource.
        If Resource B life cycle is independent of Resource A (say, people on a project ),
        this method should control only the association. And ResourceB should have
        it's own CRUD endpoints to maintain it.
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/resourceB"
      responses:
        200:
          description: "JSON representation of resourceB or the association."
        403:
          description: "Caller is not authorized to execute this method."
        404:
          description: "Parent resource {resource_id} or child resource (resourceB_id} does not exist"
        409:
          description: |
            Conflict. The resource_id in the parameter has to match the ID on the object representation. Otherwise a 409 will be sent. If using some kind of versioning to avoid overwriting changes, and there's a version mismatch, a 409 can also be used.
        500:
          description: "Any server side error can be reported via a 500"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - Resource A/B Association CRUD
      summary: "Removes the association of resource and condition. (Most likely will be simply disabled)."
      parameters:
        - in: query
          name: version
          type: string
          required: true
          description: If using versioning for concurrency, send the current version the user loaded as a query parameters.

      description:  |
        If Resource B life cycle is tied to parent Resource A (say an address for a person),
        this method controls the full life cycle of Resource B, i.e., it should delete the resource and the association.
        If Resource B life cycle is independent of Resource A (say, people on a project ),
        this method should control only the association. And ResourceB should have
        it's own CRUD endpoints to maintain it.
      responses:
        200:
          description: "Resource or Association successfully removed (or disabled/hidden)."
        403:
          description: "Caller is not authorized to execute this method."
        404:
          description: "Parent resource {resource_id} or child resource (resourceB_id} does not exist"
        409:
          description: |
            Conflict. If using some kind of versioning to avoid overwriting changes, and there's a version mismatch, a 409 can be used.
        500:
          description: "Any server side error can be reported via a 500"
          schema:
            $ref: "#/definitions/Error"


definitions:
  Error:
    type: object
    properties:
      error_code:
        type: string
      error_description:
        type: string
      error_category:
        type: string
        enum: [CAT_A, CAT_B, CAT_C]
    required: [error_code, error_description]

  resourceA:
    type: object

  resourceB:
    type: object

  CollectionResults:
    type: object
    properties:
      metadata:
        type: object
        properties:
          page_info:
            type: object
            properties:
              page_number:
                type: integer
              page_size:
                type: integer
              total_number_of_pages:
                type: integer
              max_page_size:
                type: integer
      entries:
        type: array
        items:
          $ref: "#/definitions/resourceA"

